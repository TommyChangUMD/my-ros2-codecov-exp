name: Compile site assets
on: 
  # Triggered whenever push to the main branch
  push:
    branches: [ "test-docker" ]
    
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # compile:
  #   name: Compile assets
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Run Docker container
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: osrf/ros:humble-desktop
  #         options: -v ${{ github.workspace }}:/app
  #         run: |
  #           apt update
  #           apt -y install ros-humble-gazebo-ros-pkgs 
  #           apt -y install ros-humble-turtlebot3*
  #     - name: Verify 
  #       run: |
  #         pwd
  #         ls -la
  #         uname -a
  #         cat /etc/lsb-release
  my_build_job:
    name: Build everything and run unit test in ROS 2 Docker container
    runs-on: ubuntu-18.04       # any ubuntu that has docker 
    defaults:
      run:
        shell: bash       # specify bash for use with docker container
    container:
      image: osrf/ros:humble-desktop # use ROS Humble from docker hub repository
      # volumes:
      #   - ${{ github.workspace }}:/app
    steps:
      - name: Install additional packages if needed
        run: |
          apt update
          apt -y install lcov
      - name: Check out the repo
        uses: actions/checkout@v3
        
      # Build for test coverage
      - name: Configure CMake flags and build exectables
        run: |
          source /opt/ros/humble/setup.bash
          colcon build --cmake-args -DCOVERAGE=1 --packages-select cpp_pubsub
          cat log/latest_build/cpp_pubsub/stdout_stderr.log
      
      # Check c++ code (and others) for style and static coding errors
      - name: Check code sytle and error
        run: |
          source /opt/ros/humble/setup.bash
          colcon test --packages-select cpp_pubsub
          cat log/latest_test/cpp_pubsub/stdout_stderr.log

      # Run test suite and compute code coverage
      - name: Run Test Coverage
        run: |
          source install/setup.bash
          timeout 3 ros2 launch cpp_pubsub run_test.launch.py || true
          sync; sleep 1; sync  # make sure all code coverage data are saved to disk
          ros2 run cpp_pubsub generate_coverage_report.bash
      
      # Upload coverage result to CodeCov
      - name: Upload result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/cpp_pubsub/lib/cpp_pubsub/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)      
