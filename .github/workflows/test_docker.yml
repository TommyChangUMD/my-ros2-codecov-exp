#
# Docker method.  Use pre-build ROS 2 docker image.
#
# Important Note, Docker Hub has DockerHub has restricted the number
# of image pull requests.
#
# See # https://docs.docker.com/docker-hub/download-rate-limit
#
# This means, if the you runs GitHub CI a lot, it will fail when you
# run more than 100 times within 6 hours.  And then, you will have to
# wait for a almost a day to be able to pull the docker image again.
#
# The alternative is to use GitHub Docker Registry or GitHub Pacakges
# (ghcr.io) instead of Docker Hub.
#
# https://www.youtube.com/watch?v=U7TY_qUD8yA&ab_channel=AndrewSchmelyun
# https://github.com/aschmelyun/github-actions-docker-phpunit
# https://github.com/aschmelyun/github-actions-docker-compile

name: Build (in Docker Container)
on: 
  # Triggered whenever push to the main branch
  push:
    branches: [ "test-docker" ]
    
  # Allow manual trigger
  workflow_dispatch:

jobs:
  my_build_job:
    name: Build everything and run unit test in ROS 2 Docker container
    runs-on: ubuntu-18.04       # any ubuntu that has docker 
    defaults:
      run:
        shell: bash       # specify bash for use with docker container
    container:
      image: osrf/ros:galactic-desktop # use ROS Galactic from docker hub repository
    steps:
      - name: Install additional packages if needed
        run: |
          apt update
          apt -y install lcov
      - name: Check out the repo
        uses: actions/checkout@v3
        
      # Build for test coverage
      - name: Configure CMake flags and build exectables
        run: |
          source /opt/ros/galactic/setup.bash
          colcon build --cmake-args -DCOVERAGE=1 --packages-select cpp_pubsub
          cat log/latest_build/cpp_pubsub/stdout_stderr.log
          find build/cpp_pubsub/ | grep -E 'gcda|gcno' # catch error
      
      # Check c++ code (and others) for style and static coding errors
      - name: Check code sytle and error
        run: |
          source /opt/ros/galactic/setup.bash
          colcon test --packages-select cpp_pubsub
          cat log/latest_test/cpp_pubsub/stdout_stderr.log
          colcon test-result --test-result-base build/cpp_pubsub/ # catch error

      # Run test suite and compute code coverage
      - name: Run Test Coverage
        run: |
          source install/setup.bash
          timeout -s SIGINT 3 ros2 launch cpp_pubsub run_test.launch.py || true
          find build/cpp_pubsub/ | grep -E 'gcda|gcno' # catch error
          ros2 run cpp_pubsub generate_coverage_report.bash
      
      # Upload coverage result to CodeCov
      - name: Upload result to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{github.workspace}}/install/cpp_pubsub/lib/cpp_pubsub/coverage_cleaned.info
          # flags: unittests # optional
          # directory: ${{github.workspace}}/install/
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)      
